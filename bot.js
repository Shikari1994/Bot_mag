import fetch from 'node-fetch';
import TelegramBot from 'node-telegram-bot-api';
import fs from 'fs';

const token = '8159210925:AAEEqIJX-OgRUMmF2jVH1x9wyB-YFgkWyzo';
const bot = new TelegramBot(token, { polling: true });

const apiUrl = 'https://my-json-server.typicode.com/Shikari1994/products-api/products';

const categories = [
  '–í–µ—Å—å –ø—Ä–∞–π—Å',
  'üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã',
  'üéÆ –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏',
  '‚åö –ß–∞—Å—ã',
  'üí® –§–µ–Ω—ã',
  'üìü –ü–ª–∞–Ω—à–µ—Ç—ã',
  'üíª –ù–æ—É—Ç–±—É–∫–∏',
  'üñ±Ô∏è –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Apple',
  'üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω',
  'üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä',
  'üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ HTML',
];

const categoryMapping = {
  'üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã': '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã',
  'üéÆ –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏': '–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏',
  '‚åö –ß–∞—Å—ã': '–ß–∞—Å—ã',
  'üí® –§–µ–Ω—ã': '–§–µ–Ω—ã',
  'üìü –ü–ª–∞–Ω—à–µ—Ç—ã': '–ü–ª–∞–Ω—à–µ—Ç—ã',
  'üíª –ù–æ—É—Ç–±—É–∫–∏': '–ù–æ—É—Ç–±—É–∫–∏',
  'üñ±Ô∏è –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Apple': '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Apple',
};

let previousProducts = {};
let userStates = {}; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  const keyboard = categories.map((category) => [category]);

  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:', {
    reply_markup: {
      keyboard: keyboard,
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞)
  if (userStates[chatId]?.state === 'searching') {
    handleSearch(chatId, text);
    userStates[chatId] = {}; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞
    return;
  }

  if (!categories.includes(text)) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.');
    return;
  }

  let products = await fetchProducts(chatId);
  if (!products) return;

  if (text === 'üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω') {
    handlePriceChanges(chatId, products);
    return;
  }

  if (text === 'üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ HTML') {
    handleHtmlExport(chatId, products);
    return;
  }

  if (text === 'üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä') {
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:');
    userStates[chatId] = { state: 'searching' };
    return;
  }

  let message = formatProductsMessage(text, products);
  bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

  previousProducts = products;
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ API
async function fetchProducts(chatId) {
  try {
    const response = await fetch(apiUrl);
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching products:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return null;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
function formatProductsMessage(category, products) {
  if (category === '–í–µ—Å—å –ø—Ä–∞–π—Å') {
    return Object.entries(products)
      .map(([cat, items]) => `*${cat}*:\n${items.map(item => `- ${item.name}: ${item.price}`).join('\n')}`)
      .join('\n\n');
  }

  const apiCategory = categoryMapping[category];
  const categoryProducts = products[apiCategory];

  if (!categoryProducts || categoryProducts.length === 0) {
    return `–¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`;
  }

  return `*${apiCategory}*:\n${categoryProducts.map(item => `- ${item.name}: ${item.price}`).join('\n')}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
async function handleSearch(chatId, query) {
  try {
    const products = await fetchProducts(chatId);
    if (!products) return;

    const searchResults = [];

    for (const [category, items] of Object.entries(products)) {
      const matchingItems = items.filter((item) =>
        item.name.toLowerCase().includes(query.toLowerCase())
      );

      if (matchingItems.length > 0) {
        searchResults.push({
          category: category,
          items: matchingItems,
        });
      }
    }

    if (searchResults.length === 0) {
      bot.sendMessage(chatId, `–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
      return;
    }

    let message = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}":\n\n`;
    searchResults.forEach((result) => {
      message += `*${result.category}*:\n${result.items
        .map((item) => `- ${item.name}: ${item.price}`)
        .join('\n')}\n\n`;
    });

    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error during search:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ HTML
async function handleHtmlExport(chatId, products) {
  let htmlContent = `
    <html>
      <head>
        <meta charset="UTF-8">
        <title>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</title>
      </head>
      <body>
        <h1>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤</h1>
        <table border="1" cellpadding="5" cellspacing="0">
          <tr>
            <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
            <th>–¢–æ–≤–∞—Ä</th>
            <th>–¶–µ–Ω–∞</th>
          </tr>`;

  for (const [category, items] of Object.entries(products)) {
    items.forEach((item) => {
      htmlContent += `
        <tr>
          <td>${category}</td>
          <td>${item.name}</td>
          <td>${item.price}</td>
        </tr>`;
    });
  }

  htmlContent += '</table></body></html>';

  const filePath = `products_list_${Date.now()}.html`;

  try {
    fs.writeFileSync(filePath, htmlContent);

    await bot.sendDocument(chatId, filePath, {}, {
      filename: '–°–ø–∏—Å–æ–∫_—Ç–æ–≤–∞—Ä–æ–≤.html',
      contentType: 'text/html',
    });

    fs.unlinkSync(filePath);
  } catch (error) {
    console.error('Error handling file:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
async function handlePriceChanges(chatId, currentProducts) {
  if (!previousProducts || Object.keys(previousProducts).length === 0) {
    bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ü–µ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    previousProducts = currentProducts;
    return;
  }

  let changesDetected = false;
  let htmlContent = `
    <html>
      <head>
        <meta charset="UTF-8">
        <title>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω</title>
      </head>
      <body>
        <h1>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω</h1>
        <table border="1" cellpadding="5" cellspacing="0">
          <tr>
            <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
            <th>–¢–æ–≤–∞—Ä</th>
            <th>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞</th>
            <th>–ù–æ–≤–∞—è —Ü–µ–Ω–∞</th>
          </tr>`;

  for (const [category, items] of Object.entries(currentProducts)) {
    items.forEach((currentItem) => {
      const prevItem = previousProducts[category]?.find(item => item.name === currentItem.name);
      if (prevItem && prevItem.price !== currentItem.price) {
        changesDetected = true;
        htmlContent += `
          <tr>
            <td>${category}</td>
            <td>${currentItem.name}</td>
            <td>${prevItem.price}</td>
            <td>${currentItem.price}</td>
          </tr>`;
      }
    });
  }

  htmlContent += '</table></body></html>';

  if (!changesDetected) {
    bot.sendMessage(chatId, '–¶–µ–Ω—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.');
    return;
  }

  const filePath = `price_changes_${Date.now()}.html`;
  try {
    fs.writeFileSync(filePath, htmlContent);
    await bot.sendDocument(chatId, filePath, {}, {
      filename: '–ò–∑–º–µ–Ω–µ–Ω–∏—è_—Ü–µ–Ω.html',
      contentType: 'text/html',
    });
    fs.unlinkSync(filePath);
  } catch (error) {
    console.error('Error handling file:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.');
  }

  previousProducts = currentProducts;
}

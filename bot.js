import fetch from 'node-fetch';
import TelegramBot from 'node-telegram-bot-api';
import fs from 'fs';
import dotenv from 'dotenv';
dotenv.config();


// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
const apiUrl = 'https://my-json-server.typicode.com/Shikari1994/products-api/products';

const categories = [
  '–í–µ—Å—å –ø—Ä–∞–π—Å',
  'üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã',
  'üéÆ –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏',
  '‚åö –ß–∞—Å—ã',
  'üí® –§–µ–Ω—ã',
  'üìü –ü–ª–∞–Ω—à–µ—Ç—ã',
  'üíª –ù–æ—É—Ç–±—É–∫–∏',
  'üñ±Ô∏è –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Apple',
  'üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω',
  'üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä',
  'üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ HTML',
];

const categoryMapping = {
  'üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã': '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã',
  'üéÆ –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏': '–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏',
  '‚åö –ß–∞—Å—ã': '–ß–∞—Å—ã',
  'üí® –§–µ–Ω—ã': '–§–µ–Ω—ã',
  'üìü –ü–ª–∞–Ω—à–µ—Ç—ã': '–ü–ª–∞–Ω—à–µ—Ç—ã',
  'üíª –ù–æ—É—Ç–±—É–∫–∏': '–ù–æ—É—Ç–±—É–∫–∏',
  'üñ±Ô∏è –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Apple': '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Apple',
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
const userStates = {}; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let previousProducts = {}; // –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω

// ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ======

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const keyboard = categories.map((category) => [category]);

  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:', {
    reply_markup: {
      keyboard,
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!categories.includes(text)) {
    return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.');
  }

  const products = await fetchProducts(chatId);
  if (!products) return;

  switch (text) {
    case 'üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω':
      return handlePriceChanges(chatId, products);
    case 'üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ HTML':
      return handleHtmlExport(chatId, products);
    case 'üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä':
      userStates[chatId] = { state: 'searching' };
      return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:');
    default:
      const message = formatProductsMessage(text, products);
      return bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }
});

// ====== –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ======

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
async function fetchProducts(chatId) {
  try {
    const response = await fetch(apiUrl);
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message);
    bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return null;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
function formatProductsMessage(category, products) {
  if (category === '–í–µ—Å—å –ø—Ä–∞–π—Å') {
    return Object.entries(products)
      .map(([cat, items]) => `*${cat}*:\n${items.map(item => `- ${item.name}: ${item.price}`).join('\n')}`)
      .join('\n\n');
  }

  const apiCategory = categoryMapping[category];
  const categoryProducts = products[apiCategory];

  if (!categoryProducts || categoryProducts.length === 0) {
    return `–¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`;
  }

  return `*${apiCategory}*:\n${categoryProducts.map(item => `- ${item.name}: ${item.price}`).join('\n')}`;
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML
function handleHtmlExport(chatId, products) {
  const htmlContent = generateHtml(products, '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤', ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–æ–≤–∞—Ä', '–¶–µ–Ω–∞']);
  sendHtmlFile(chatId, htmlContent, 'products_list.html', '–°–ø–∏—Å–æ–∫_—Ç–æ–≤–∞—Ä–æ–≤.html');
}

// –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
function handlePriceChanges(chatId, currentProducts) {
  if (!previousProducts || Object.keys(previousProducts).length === 0) {
    bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ü–µ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    previousProducts = currentProducts;
    return;
  }

  const changesHtml = generateHtmlWithChanges(previousProducts, currentProducts);
  if (!changesHtml) {
    return bot.sendMessage(chatId, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
  }

  sendHtmlFile(chatId, changesHtml, 'price_changes.html', '–ò–∑–º–µ–Ω–µ–Ω–∏—è_—Ü–µ–Ω.html');
  previousProducts = currentProducts;
}

// ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ======

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
function generateHtml(products, title, headers) {
  const rows = Object.entries(products).flatMap(([category, items]) =>
    items.map(item => `<tr><td>${category}</td><td>${item.name}</td><td>${item.price}</td></tr>`)
  );

  return `
    <html>
      <head><meta charset="UTF-8"><title>${title}</title></head>
      <body>
        <h1>${title}</h1>
        <table border="1" cellpadding="5" cellspacing="0">
          <tr>${headers.map(header => `<th>${header}</th>`).join('')}</tr>
          ${rows.join('')}
        </table>
      </body>
    </html>`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ü–µ–Ω
function generateHtmlWithChanges(prevProducts, currProducts) {
  const rows = [];
  let hasChanges = false;

  for (const [category, items] of Object.entries(currProducts)) {
    items.forEach(item => {
      const prevItem = prevProducts[category]?.find(p => p.name === item.name);
      if (prevItem && prevItem.price !== item.price) {
        hasChanges = true;
        rows.push(`<tr><td>${category}</td><td>${item.name}</td><td>${prevItem.price}</td><td>${item.price}</td></tr>`);
      }
    });
  }

  if (!hasChanges) return null;

  return `
    <html>
      <head><meta charset="UTF-8"><title>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω</title></head>
      <body>
        <h1>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω</h1>
        <table border="1" cellpadding="5" cellspacing="0">
          <tr><th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th><th>–¢–æ–≤–∞—Ä</th><th>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞</th><th>–ù–æ–≤–∞—è —Ü–µ–Ω–∞</th></tr>
          ${rows.join('')}
        </table>
      </body>
    </html>`;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ HTML —Ñ–∞–π–ª–∞
function sendHtmlFile(chatId, content, filePath, fileName) {
  try {
    fs.writeFileSync(filePath, content);
    bot.sendDocument(chatId, filePath, {}, { filename: fileName, contentType: 'text/html' });
    fs.unlinkSync(filePath);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞:', error.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.');
  }
}
